#!/usr/bin/env bash
set -u

############################################################
# Adjust for each check
############################################################

# Version
MY_VERSION="0.5"
MY_DATE="2016-08-21"

# Name and messages
MY_NAME="syntax-sh"
MY_DESC="Scans recursively for files containing shell (/bin/sh) syntax errors."
MY_FINISH_OK="No files with shell (/bin/sh) syntax errors found."
MY_FINISH_ERR="Found files with shell (/bin/sh) syntax errors."

# Configuration file prefix
MY_CONF_PRE="SYNTAX_SH_"

# Custom required binaries
REQUIRED_CUST_BINS="sh"

# Enable custom options (cmd arguments)
# that can be parsed to the actual check binary?
ENABLE_CUST_OPS=0

# When not specifying --custom,
# always use this as the default options
# to parse to the check binary.
DEFAULT_CUST_OPS=""

# How to check for files
# Note: '%' comes from xargs and represents
# one file as parameter.
# Called like this:
#   eval "xargs -I % sh '${MY_CHECK}'"
MY_CHECK="sh -n \"%\" 2>&1 || true"

# Command to be displayed for --info
MY_INFO="(realpath /bin/sh 2>/dev/null | grep -q 'dash') && echo 'Dash Shell' || sh --version | grep -E '(([0-9]+)(\.))+'"






############################################################
# Do not edit from here
############################################################

#
# Credits
#
MY_AUTHOR="cytopia"
MY_EMAIL="cytopia@everythingcli.org"

#
# Required system binaries
#
REQUIRED_BINS="awk grep find sed tr xargs"

#
# Variables populated by cmd args or config file
#
MY_PATH=
MY_SHE=
MY_EXT=
MY_IGN=
MY_TXT=0
MY_SIZ=0
MY_DRY=0
MY_LST=0
MY_VER=0
MY_DEB=0
MY_CFG=
MY_CUS=



################################################################################
#
#  F U N C T I O N S
#
################################################################################

print_usage() {

	if [ "${ENABLE_CUST_OPS}" = "1" ];then
		_custom=" [--custom=\"opts\"]"
	else
		_custom=""
	fi

	echo "Usage: ${MY_NAME} [--text] [--size] [--shebang=php] [--extension=tpl,htm,html,php,...] [--ignore=dir1,dir2] [--config=conf]${_custom} [--verbose] [--debug] [--dry] [--list] --path=dir"
	echo "       ${MY_NAME} --info"
	echo "       ${MY_NAME} --help"
	echo "       ${MY_NAME} --version"
	echo
	echo "${MY_DESC}"
	echo "Will return 1 on occurance, otherwise 0."
	echo
	echo "Required arguments:"
	echo
	echo "  --path=            Specify directory where to scan."
	echo
	echo
	echo "Optional run arguments:"
	echo "  --text             Limit search to text files only (non-binary)."
	echo "                     Can be narrowed further with '--extension'"
	echo
	echo "  --size             Limit search to files which are not empty (bigger than 0 bytes)."
	echo
	echo "  --shebang=         Only find files (shell scripts) with this specific shebang."
	echo "                     It is useful to combine this with --text and --size for faster searches."
	echo "                     Use with --dry to see how this search command is generated."
	echo "                     Example:"
	echo "                         --shebang=bash"
	echo "                         --shebang=php"
	echo "                         --shebang=sh"
	echo
	echo "  --extension=       Only find files matching those extensions."
	echo "                     Comma separated list of file extensions."
	echo "                     Only find files matching those extensions."
	echo "                     Defaults to all files if not specified or empty."
	echo "                     Example:"
	echo "                         --extension=html,php,inc"
	echo "                         --extension=php"
	echo
	echo "  --ignore=          Comma separated list of ignore paths."
	echo "                     Directories must be specified from the starting location of --path."
	echo "                     Example:"
	echo "                          ignore 'foor/bar' folder inside '/var/www' path:"
	echo "                         --path=/var/www --ignore=foo/bar"
	echo
	echo "  --config=          Load configuration file."
	echo "                     File must contain the following directives:"
	echo "                         ${MY_CONF_PRE}EXTENSION=\"\" # comma separated"
	echo "                         ${MY_CONF_PRE}IGNORE=\"\"    # comma separated"
	echo "                         ${MY_CONF_PRE}TEXT=0|1     # 0 or 1"
	echo "                     Note that cmd arguments take precedence over"
	echo "                     config file settings."
	echo
	if [ "${ENABLE_CUST_OPS}" = "1" ];then
		CURRENT_COMMAND="$( echo "${DEFAULT_CUST_OPS}" | sed 's?\"?\\\"?g' )"
		echo "  --custom=          Parse custom command line option to the check binary."
		echo "                     Note that when you want to add config files or other files"
		echo "                     you must use an absolute path."
		echo
		echo "                     Current custom command:"
		echo "                          --custom=\"${CURRENT_COMMAND}\""
		echo
		echo "                     Overwrite example:"
		echo "                          --custom=\"--color --config /absoulte/path/conf.json\""
		echo
	fi
	echo "  --verbose          Be verbose and print commands and files being checked."
	echo
	echo
	echo "  --debug            Print system messages."
	echo
	echo
	echo "Optional training arguments:"
	echo "  --dry              Don't do anything, just display the commands."
	echo
	echo "  --list             Instead of searching inside the files, just display the filenames"
	echo "                     that would be found by --path, --extension and --ignore"
	echo
	echo
	echo "System arguments:"
	echo "  --info             Show command version."
	echo "  --help             Show help screen."
	echo "  --version          Show version information."
	echo
	echo
	echo "${MY_NAME} is part of the awesome-ci collection."
	echo "https://github.com/cytopia/awesome-ci"
}

print_version() {
	echo "tool:    ${MY_NAME}"
	echo "version: v${MY_VERSION} (${MY_DATE})"
	echo "author:  ${MY_AUTHOR}"
	echo "email:   ${MY_EMAIL}"
	echo
	echo "${MY_NAME} is part of the awesome-ci collection."
	echo "https://github.com/cytopia/awesome-ci"
}

check_requirements() {
	_debug="${1}"
	_ret1=0
	_ret2=0

	# System binaries
	for _bin in ${REQUIRED_BINS}; do
		if ! command -v "${_bin}" >/dev/null 2>&1; then
			echo "[ERR] Required sys binary '${_bin}' not found."
			_ret1=1
		else
			if [ "${_debug}" = "1" ]; then
				echo "[OK]  Required system binary '${_bin}' found."
			fi
		fi
	done

	# Specific binaries for this check
	for _bin in ${REQUIRED_CUST_BINS}; do
		if ! command -v "${_bin}" >/dev/null 2>&1; then
			echo "[ERR] Required custom binary '${_bin}' not found."
			_ret2=1
		else
			if [ "${_debug}" = "1" ]; then
				echo "[OK]  Required custom binary '${_bin}' found."
			fi
		fi
	done

	return $((_ret1 + _ret2))
}

check_config_file() {
	_config="${1}"

	# Check config file
	if [ ! -f "${_config}" ]; then
		echo "[CONFIG] Config file not found: ${_config}"
		return 1
	fi
	if ! grep -Eq "^${MY_CONF_PRE}IGNORE=" "${_config}"; then
		echo "[CONFIG] ${MY_CONF_PRE}IGNORE variable not found in config."
		return 1
	fi
	if ! grep -Eq "^${MY_CONF_PRE}IGNORE=[\"']{1}.*[\"']{1}$" "${_config}"; then
		echo "[CONFIG] Invalid syntax for ${MY_CONF_PRE}IGNORE variable."
		return 1
	fi
	if ! grep -Eq "^${MY_CONF_PRE}EXTENSION=" "${_config}"; then
		echo "[CONFIG] ${MY_CONF_PRE}EXTENSION variable not found in config."
		return 1
	fi
	if ! grep -Eq "^${MY_CONF_PRE}EXTENSION=[\"']{1}.*[\"']{1}$" "${_config}"; then
		echo "[CONFIG] Invalid syntax for ${MY_CONF_PRE}EXTENSION variable."
		return 1
	fi
	if ! grep -Eq "^${MY_CONF_PRE}TEXT=" "${_config}"; then
		echo "[CONFIG] ${MY_CONF_PRE}TEXT variable not found in config."
		return 1
	fi
	if ! grep -Eq "^${MY_CONF_PRE}TEXT=[\"']*[01]{1}[\"']*$" "${_config}"; then
		echo "[CONFIG] Invalid syntax for ${MY_CONF_PRE}TEXT variable."
		return 1
	fi
}

num_cpu() {
	_num="$(getconf _NPROCESSORS_ONLN)"

	# Worked
	if [ "$?" = "0" ]; then
		echo "${_num}"
		return 0
	else
		echo "1"
		return 1
	fi
}


################################################################################
#
#  M A I N   E N T R Y   P O I N T
#
################################################################################



############################################################
# Command Line arguments
############################################################


#
# Read command line arguments
#
while [ $# -gt 0  ]; do
	case "${1}" in

		# ----------------------------------------
		--path=*)
			MY_PATH="$( echo "${1}" | sed 's/--path=//g' )"
			;;

		# ----------------------------------------
		--shebang=*)
			MY_SHE="$( echo "${1}" | sed 's/--shebang=//g' )"
			;;

		# ----------------------------------------
		--extension=*)
			MY_EXT="$( echo "${1}" | sed 's/--extension=//g' )"
			;;

		# ----------------------------------------
		--ignore=*)
			MY_IGN="$( echo "${1}" | sed 's/--ignore=//g' )"
			;;

		# ----------------------------------------
		--config=*)
			MY_CFG="$( echo "${1}" | sed 's/--config=//g' )"
			;;

		# ----------------------------------------
		--custom=*)
			if [ "${ENABLE_CUST_OPS}" = "1" ]; then
				MY_CUS="$( echo "${1}" | sed 's/--custom=//g' )"
			else
				echo "Invalid argument: ${1}"
				echo "Type '${MY_NAME} --help' for available options."
				exit 1
			fi
			;;

		# ----------------------------------------
		--text)
			MY_TXT=1
			;;

		# ----------------------------------------
		--size)
			MY_SIZ=1
			;;

		# ----------------------------------------
		--dry)
			MY_DRY=1
			;;

		# ----------------------------------------
		--list)
			MY_LST=1
			;;

		# ----------------------------------------
		--verbose)
			MY_VER=1
			;;

		# ----------------------------------------
		--debug)
			MY_DEB=1
			;;

		# ----------------------------------------
		--info)
			echo "\$ ${MY_INFO}"
			eval "${MY_INFO}"
			exit 0
			;;

		# ----------------------------------------
		--help)
			print_usage
			exit 0
			;;

		# ----------------------------------------
		--version)
			print_version
			exit 0
			;;

		# ----------------------------------------
		*)
			echo "Invalid argument: ${1}"
			echo "Type '${MY_NAME} --help' for available options."
			exit 1
			;;
	esac
	shift
done



############################################################
# Sanity Checks
############################################################

#
# Check general requirements
#
if ! check_requirements "${MY_DEB}"; then
	exit 1
fi

#
# Check path
#
if [ "${MY_PATH}" = "" ]; then
	echo "--path not specified"
	echo "Type '${MY_NAME} --help' for available options."
	exit 1
fi
if [ ! -e "${MY_PATH}" ]; then
	echo "Specified path does not exist: '${MY_PATH}'."
	echo "Type '${MY_NAME} --help' for available options."
	exit 1
fi


#
# Check and load config if desired
#
if [ "${MY_CFG}" != "" ]; then
	if ! check_config_file "${MY_CFG}"; then
		exit 1
	fi

	. "${MY_CFG}"
fi



############################################################
# Evaluate Settings
############################################################

CPU_CORES="$(num_cpu)"


# Var substitutions for config file directives
# to match current program.
EXTENSION="${MY_CONF_PRE}EXTENSION"
IGNORE="${MY_CONF_PRE}IGNORE"
TEXT="${MY_CONF_PRE}TEXT"
SIZE="${MY_CONF_PRE}SIZE"

#
# Decide on Shebang
#
if [ "${MY_SHE}" != "" ]; then
	MY_SHE="xargs -0 -P ${CPU_CORES} -n1 -I {} sh -c 'awk \"/^#!.*(\/${MY_SHE}|[[:space:]]+${MY_SHE})/{print FILENAME}\" \"{}\" || true'"
else
	MY_SHE=""
fi



#
# Decide on File extensions
#
if [ "${MY_CFG}" != "" ] && [ "${MY_EXT}" != "" ]; then
	if [ "${MY_DEB}" = "1" ]; then
		echo "[ARG] Cmd arg --extension=${MY_EXT} will take precedence over config file value".
	fi
	MY_EXT="${MY_EXT}"

elif [ "${MY_CFG}" != "" ] && [ "${MY_EXT}" = "" ]; then
	if [ "${MY_DEB}" = "1" ]; then
		echo "[ARG] Using config file values: ext: ${!EXTENSION}"
	fi
	MY_EXT="${!EXTENSION}"

elif [ "${MY_CFG}" = "" ] && [ "${MY_EXT}" != "" ]; then
	if [ "${MY_DEB}" = "1" ]; then
		echo "[ARG] Using cmd argument: ext: ${MY_EXT}"
	fi
	MY_EXT="${MY_EXT}"

else
	if [ "${MY_DEB}" = "1" ]; then
		echo "[ARG] Using all file extensions"
	fi
	MY_EXT=
fi


#
# Decide on ignore paths
#
if [ "${MY_CFG}" != "" ] && [ "${MY_IGN}" != "" ]; then
	if [ "${MY_DEB}" = "1" ]; then
		echo "[ARG] Cmd arg --ignore=${MY_IGN} will take precedence over config file value".
	fi
	MY_IGN="${MY_IGN}"

elif [ "${MY_CFG}" != "" ] && [ "${MY_IGN}" = "" ]; then
	if [ "${MY_DEB}" = "1" ]; then
		echo "[ARG] Using config file values: ignore: ${!IGNORE}"
	fi
	MY_IGN="${!IGNORE}"

elif [ "${MY_CFG}" = "" ] && [ "${MY_IGN}" != "" ]; then
	if [ "${MY_DEB}" = "1" ]; then
		echo "[ARG] Using cmd argument: ignore: ${MY_IGN}"
	fi
	MY_IGN="${MY_IGN}"

else
	if [ "${MY_DEB}" = "1" ]; then
		echo "[ARG] Not ignoring anything"
	fi
	MY_IGN=
fi


#
# Decide on text files (non-binary) or all files
#
if [ "${MY_CFG}" != "" ] && [ "${MY_TXT}" != "0" ]; then
	if [ "${MY_DEB}" = "1" ]; then
		echo "[ARG] Cmd arg --text: '${MY_TXT}' will take precedence over config file value".
	fi
	MY_TXT="${MY_TXT}"

elif [ "${MY_CFG}" != "" ] && [ "${MY_TXT}" = "0" ]; then
	if [ "${MY_DEB}" = "1" ]; then
		echo "[ARG] Using config file values: --text: ${!TEXT}"
	fi
	MY_TXT="${!TEXT}"

elif [ "${MY_CFG}" = "" ] && [ "${MY_TXT}" != "0" ]; then
	if [ "${MY_DEB}" = "1" ]; then
		echo "[ARG] Using cmd argument: --text: ${MY_TXT}"
	fi
	MY_TXT="${MY_TXT}"

else
	if [ "${MY_DEB}" = "1" ]; then
		echo "[ARG] Not narrowing down by text files"
	fi
	MY_TXT="0"
fi


#
# Decide on file size
#
if [ "${MY_CFG}" != "" ] && [ "${MY_SIZ}" != "0" ]; then
	if [ "${MY_DEB}" = "1" ]; then
		echo "[ARG] Cmd arg --size: '${MY_SIZ}' will take precedence over config file value".
	fi
	MY_SIZ="${MY_SIZ}"

elif [ "${MY_CFG}" != "" ] && [ "${MY_SIZ}" = "0" ]; then
	if [ "${MY_DEB}" = "1" ]; then
		echo "[ARG] Using config file values: --size: ${!SIZE}"
	fi
	MY_SIZ="${!SIZE}"

elif [ "${MY_CFG}" = "" ] && [ "${MY_SIZ}" != "0" ]; then
	if [ "${MY_DEB}" = "1" ]; then
		echo "[ARG] Using cmd argument: --size: ${MY_SIZ}"
	fi
	MY_SIZ="${MY_SIZ}"

else
	if [ "${MY_DEB}" = "1" ]; then
		echo "[ARG] Not narrowing down by size > 0 bytes"
	fi
	MY_SIZ="0"
fi

if [ "${MY_SIZ}" = "1" ]; then
	MY_SIZ="! -size 0"
else
	MY_SIZ=""
fi




############################################################
# Build command
############################################################

#
# 'find' pattern for file extensions
#
if [ "${MY_EXT}" != "" ]; then
	NAME_PATTERN="\( -iname '*.$(echo "${MY_EXT}" | sed "s/,/' -o -iname '*\./g")' \)"
else
	NAME_PATTERN=""
fi

#
# 'find' pattern for ignores/excludes
#
if [ "${MY_IGN}" != "" ]; then
	EXCL_PATTERN="-not \( -path \"${MY_PATH}/$(echo "${MY_IGN}" | sed "s|,|*\" -o -path \"${MY_PATH}/|g")*\" \)"
else
	EXCL_PATTERN=""
fi


#
# Customize command?
#
if [ "${MY_CUS}" = "" ]; then
	MY_CHECK="$( echo "${MY_CHECK}" | sed "s|__CUSTOM_OPT_PLACEHOLDER__|${DEFAULT_CUST_OPS}|g" )"
else
	MY_CHECK="$( echo "${MY_CHECK}" | sed "s|__CUSTOM_OPT_PLACEHOLDER__|${MY_CUS}|g" )"
fi


#
# Show files or grep in found files?
#


# Be verbose?
if [ "${MY_VER}" = "1" ]; then
	XARGS_VERBOSE="-t"
else
	XARGS_VERBOSE=""
fi

#
# Build command
#


### Text files (list-only)
if [ "${MY_TXT}" = "1" ] && [ "${MY_LST}" = "1" ]; then
	if [ "${MY_SHE}" != "" ]; then
		MY_CMD="find ${MY_PATH} -type f ${NAME_PATTERN} ${EXCL_PATTERN} ${MY_SIZ} -print0 | xargs -0 -P ${CPU_CORES} -n1 -I % grep -Il '' '%' | tr '\n' '\0' | ${MY_SHE}"
	else
		MY_CMD="find ${MY_PATH} -type f ${NAME_PATTERN} ${EXCL_PATTERN} ${MY_SIZ} -print0 | xargs -0 -P ${CPU_CORES} -n1 -I % grep -Il '' '%'"
	fi

### Text files (run!!!)
elif [ "${MY_TXT}" = "1" ] && [ "${MY_LST}" = "0" ]; then
	if [ "${MY_SHE}" != "" ]; then
		MY_CMD="find ${MY_PATH} -type f ${NAME_PATTERN} ${EXCL_PATTERN} ${MY_SIZ} -print0 | xargs -0 -P ${CPU_CORES} -n1 -I % grep -Il '' '%' | tr '\n' '\0' | ${MY_SHE} | tr '\n' '\0' | xargs -0 -P ${CPU_CORES} -n1 ${XARGS_VERBOSE} -I % sh -c '${MY_CHECK}'"
	else
		MY_CMD="find ${MY_PATH} -type f ${NAME_PATTERN} ${EXCL_PATTERN} ${MY_SIZ} -print0 | xargs -0 -P ${CPU_CORES} -n1 -I % grep -Il '' '%' | tr '\n' '\0' | xargs -0 -P ${CPU_CORES} -n1 ${XARGS_VERBOSE} -I % sh -c '${MY_CHECK}'"
	fi

### All files (list-only)
elif [ "${MY_TXT}" = "0" ] && [ "${MY_LST}" = "1" ]; then
	if [ "${MY_SHE}" != "" ]; then
		MY_CMD="find ${MY_PATH} -type f ${NAME_PATTERN} ${EXCL_PATTERN} ${MY_SIZ} -print0 | ${MY_SHE}"
	else
		MY_CMD="find ${MY_PATH} -type f ${NAME_PATTERN} ${EXCL_PATTERN} ${MY_SIZ} -print"
	fi


### All files (run!!!)
else
	if [ "${MY_SHE}" != "" ]; then
		MY_CMD="find ${MY_PATH} -type f ${NAME_PATTERN} ${EXCL_PATTERN}${MY_SIZ}  -print0 | ${MY_SHE} | tr '\n' '\0' | xargs -0 -P ${CPU_CORES} -n1 ${XARGS_VERBOSE} -I % sh -c '${MY_CHECK}'"
	else
		MY_CMD="find ${MY_PATH} -type f ${NAME_PATTERN} ${EXCL_PATTERN}${MY_SIZ}  -print0 | xargs -0 -P ${CPU_CORES} -n1 ${XARGS_VERBOSE} -I % sh -c '${MY_CHECK}'"
	fi

fi




############################################################
# Execute
############################################################

# Dry mode?
if [ "${MY_DRY}" = "1" ]; then
	echo "${MY_CMD}"
	exit 0
fi

echo "\$ ${MY_CMD}"

output="$(eval "${MY_CMD}")"

# If showing files only, exit normally
if [ "${MY_LST}" = "1" ]; then
	echo "${output}"
	exit 0
fi


if [ "${output}" != "" ]; then
	printf "%s\n" "${output}"
	echo "[ERR] ${MY_FINISH_ERR}"
	exit 1
else
	echo "[OK]  ${MY_FINISH_OK}"
	exit 0
fi
